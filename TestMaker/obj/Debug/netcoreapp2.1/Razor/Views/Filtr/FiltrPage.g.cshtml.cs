#pragma checksum "D:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "2b07489cc410c6397bbaa07e70c2b006f6aa0335"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Filtr_FiltrPage), @"mvc.1.0.view", @"/Views/Filtr/FiltrPage.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Filtr/FiltrPage.cshtml", typeof(AspNetCore.Views_Filtr_FiltrPage))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 2 "D:\MyGit\MyProject\TestMaker\TestMaker\Views\_ViewImports.cshtml"
using TestMaker.Models;

#line default
#line hidden
#line 3 "D:\MyGit\MyProject\TestMaker\TestMaker\Views\_ViewImports.cshtml"
using TestMaker.ViewModels;

#line default
#line hidden
#line 4 "D:\MyGit\MyProject\TestMaker\TestMaker\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"2b07489cc410c6397bbaa07e70c2b006f6aa0335", @"/Views/Filtr/FiltrPage.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4bc10e74c8a7c33899ebdcc776e44546a0ef5fb5", @"/Views/_ViewImports.cshtml")]
    public class Views_Filtr_FiltrPage : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<List<Question>>
    {
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(23, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 3 "D:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml"
  
    List<Answer> answerChoice = new List<Answer>();
    

#line default
#line hidden
#line 5 "D:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml"
     foreach (var question in Model)
    {
        if (question.Type == "Single" || question.Type == "Multiple")
        {
            foreach (var answer in question.Answers)
            {
                answerChoice.Add(answer);
            }
        }
    }

#line default
#line hidden
            BeginContext(357, 39, true);
            WriteLiteral("\r\n<div id=\"app\">\r\n    <v-app>\r\n        ");
            EndContext();
            BeginContext(397, 23, false);
#line 19 "D:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml"
   Write(Html.AntiForgeryToken());

#line default
#line hidden
            EndContext();
            BeginContext(420, 10, true);
            WriteLiteral("\r\n        ");
            EndContext();
            BeginContext(431, 71, false);
#line 20 "D:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml"
   Write(await Html.PartialAsync("~/Views/Shared/_RightSidePanelPartial.cshtml"));

#line default
#line hidden
            EndContext();
            BeginContext(502, 836, true);
            WriteLiteral(@"
        <v-content>
            <v-container align-center justify-end row fill-height>
                <v-layout xs12 sm8 md6>
                    <v-flex>
                        <v-card class=""elevation-15"">
                            <v-toolbar color=""deep-orange darken-3"">
                                <v-toolbar-title>Filtrs</v-toolbar-title>
                                <v-spacer></v-spacer>
                            </v-toolbar>
                            <div class=""text-md-center"">
                                <v-card-text>
                                    <v-container>
                                        <v-layout>
                                            <v-flex>
                                                <v-card-text>
                                                    ");
            EndContext();
            BeginContext(1339, 77, false);
#line 36 "D:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml"
                                               Write(await Html.PartialAsync("~/Views/Filtr/_PartialQuestionSelect.cshtml", Model));

#line default
#line hidden
            EndContext();
            BeginContext(1416, 238, true);
            WriteLiteral("\r\n                                                </v-card-text>\r\n                                            </v-flex>\r\n                                            <v-flex>\r\n                                                <v-card-text>\r\n");
            EndContext();
            BeginContext(1777, 603, true);
            WriteLiteral(@"                                                    <v-btn color=""warning"" v-on:click=""add"">Add</v-btn>
                                                </v-card-text>
                                            </v-flex>
                                        </v-layout>
                                    </v-container>

                                    <v-container>
                                        <v-layout>
                                            <v-flex>
                                                <v-card-text>
                                                    ");
            EndContext();
            BeginContext(2381, 82, false);
#line 52 "D:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml"
                                               Write(await Html.PartialAsync("~/Views/Filtr/_PartialAnswerSelect.cshtml", answerChoice));

#line default
#line hidden
            EndContext();
            BeginContext(2463, 949, true);
            WriteLiteral(@"
                                                </v-card-text>
                                            </v-flex>
                                            <v-flex>
                                                <v-card-text>
                                                    <v-btn color=""red"" v-on:click=""find"">Find</v-btn>
                                                </v-card-text>
                                            </v-flex>
                                        </v-layout>
                                    </v-container>
                                    <v-container>
                                        <v-layout>
                                            <v-flex>
                                                <v-card-text>
                                                    <select class=""custom-select"" id=""samplePersonSelect"">
                                                        ");
            EndContext();
            BeginContext(3412, 49, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0ecc3ce5b4ac430b8e373fd4c91459bf", async() => {
                BeginContext(3429, 23, true);
                WriteLiteral("Select sample person Id");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
            BeginWriteTagHelperAttribute();
            __tagHelperStringValueBuffer = EndWriteTagHelperAttribute();
            __tagHelperExecutionContext.AddHtmlAttribute("selected", Html.Raw(__tagHelperStringValueBuffer), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.Minimized);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(3461, 306, true);
            WriteLiteral(@"
                                                    </select>
                                                </v-card-text>
                                            </v-flex>
                                            <v-flex>
                                                <v-btn color=""blue"" ");
            EndContext();
            BeginContext(3768, 1687, true);
            WriteLiteral(@"@click=""look"">Look test</v-btn>
                                            </v-flex>
                                        </v-layout>
                                    </v-container>
                                    <v-divider></v-divider>
                                    <v-container>
                                        <v-layout>
                                            <v-flex>
                                                <v-card-text>
                                                    <table id=""parametr"" class=""table table-hover"">
                                                        <thead>
                                                            <tr>
                                                                <th scope=""col"">Question</th>
                                                                <th scope=""col"">Answer</th>
                                                            </tr>
                                                        </thead");
            WriteLiteral(@">
                                                        <tbody></tbody>
                                                    </table>
                                                    <div id=""result""></div>
                                                </v-card-text>
                                            </v-flex>
                                        </v-layout>
                                    </v-container>
                                </v-card-text>
                            </div>
                        </v-flex>
                </v-layout>
            </v-container>

        </v-content>
    </v-app>
</div>

");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(5472, 1403, true);
                WriteLiteral(@"
<script>
        var app = new Vue({
            el: '#app',
                        data() {
                            return {
                                drawer: true,
                                itemsForMembers: [
                                    { title: ""Home"", link: ""/Home/Index/"", icon: ""home"", id: ""homeBtn"" },
                                    { title: ""Create test"", link: ""/Test/CreateTest/"", icon: ""ballot"" },
                                    { title: ""Graphs"", link: ""/Test/Graphs/"", icon: ""equalizer"" }

                                ],
                                itemsLoginPartial: [
                                    { title: ""Login"", link: ""/Account/Login/"" },
                                    { title: ""Register"", link: ""/Account/Register/"" }
                                ],
                                itemsForAdmins: [
                                    { title: ""Home"", link: ""/Home/Index/"", icon: ""home"" },
                                   ");
                WriteLiteral(@" { title: ""Manage user roles"", link: ""/Admin/ManageUserRoles/"", icon: ""dashboard"" },
                                    { title: ""Manage users"", link: ""/Admin/Members/"", icon: ""people"" }
                                ],
                                dropDownFromResult: [
                                    { title: ""Single answer"", link: ""/Question/CreateSingleAnswer/");
                EndContext();
                BeginContext(6876, 34, false);
#line 128 "D:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml"
                                                                                             Write(ViewContext.RouteData.Values["id"]);

#line default
#line hidden
                EndContext();
                BeginContext(6910, 102, true);
                WriteLiteral("\" },\r\n                                    { title: \"Short answer\", link: \"/Question/CreateShortAnswer/");
                EndContext();
                BeginContext(7013, 34, false);
#line 129 "D:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml"
                                                                                           Write(ViewContext.RouteData.Values["id"]);

#line default
#line hidden
                EndContext();
                BeginContext(7047, 108, true);
                WriteLiteral("\" },\r\n                                    { title: \"Multiple choice\", link: \"/Question/CreateMultipleChoice/");
                EndContext();
                BeginContext(7156, 34, false);
#line 130 "D:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml"
                                                                                                 Write(ViewContext.RouteData.Values["id"]);

#line default
#line hidden
                EndContext();
                BeginContext(7190, 104, true);
                WriteLiteral("\" },\r\n                                    { title: \"Range answer\", link: \"/Question/CreateRangeQuestion/");
                EndContext();
                BeginContext(7295, 34, false);
#line 131 "D:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml"
                                                                                             Write(ViewContext.RouteData.Values["id"]);

#line default
#line hidden
                EndContext();
                BeginContext(7329, 224, true);
                WriteLiteral("\" }\r\n                                ],\r\n                                array: [],\r\n                                idQuestion: \'\',\r\n                                answerText: \'\',\r\n                                testId: \"");
                EndContext();
                BeginContext(7554, 34, false);
#line 136 "D:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml"
                                    Write(ViewContext.RouteData.Values["id"]);

#line default
#line hidden
                EndContext();
                BeginContext(7588, 4988, true);
                WriteLiteral(@"""
                            }
            },
            methods: {
                find: function () {
                    let app = this;
                            var data2send = JSON.stringify({ ""params"": app.array });
                            $.ajax({
                                type: ""post"",
                                url: ""/Filtr/GetSamplePersonsId"",
                                beforeSend: function (request) {
                                    request.setRequestHeader(""RequestVerificationToken"", $(""[name = '__RequestVerificationToken']"").val());
                                },
                                contentType: ""application/json"",
                                data: data2send,
                                dataType: ""json"",
                                success: function (response) {
                                    var idSP = response;
                                    console.log(idSP);
                                    $.each(respons");
                WriteLiteral(@"e, function (index, value) {
                                        $(""select#samplePersonSelect"").append(""<option>"" + value + ""</option>"");
                                        //app.samplePersonSelect.push({ spId: value });
                                        //$(""#filtrResult tbody"").append(""<tr><td class='value'>"" + value + ""</td><td><button class='btn btn-warning' id='btnSee'>See Test</button></td></tr>"")
                                    })
                                }
                            });
                },
                add: function () {
                    var markup;
                    let app = this;
                    $(""#questionSelect option:selected"").each(function () {
                        app.idQuestion = $(this).val();
                        var questionText = $(this).text();
                        $(""#answerSelect option:selected"").each(function () {
                            app.answerText = $(this).text();
                            a");
                WriteLiteral(@"pp.array.push({ QuestionId: app.idQuestion, Text: app.answerText });

                            markup = ""<tr><td  scope='row'>"" + questionText + ""</td><td>"" + app.answerText + ""</td></tr>"";
                        });
                    });
                    $(""#parametr tbody"").append(markup);

                },
                look: function () {
                    let app = this;
                    $(""#samplePersonSelect option:selected"").each(function () {
                        var spId = $(this).text();
                        console.log(spId);
                        var model = { TestId: app.testId, SamplePersonId: spId };
                        $.ajax({
                            type: ""post"",
                            url: ""/Filtr/GetSamplePersonTest"",
                            beforeSend: function (request) {
                                request.setRequestHeader(""RequestVerificationToken"", $(""[name = '__RequestVerificationToken']"").val());
                    ");
                WriteLiteral(@"        },
                            contentType: ""application/json; charset=utf-8"",
                            data: JSON.stringify(model), //JSON.stringify({ connectAnswers }),
                            dataType: ""html"",
                            success: function (res) {
                                console.log(res)
                                $(""#result"").html(res);
                                $(""#exampleModal"").modal(""toggle"");
                            }
                        });
                    })
                }
            }
        })
        $(""#questionSelect"").change(function () {
            $(""#questionSelect option:selected"").each(function () {
                var idQuestion = $(this).val();
                $(""#answerSelect option"").each(function () {
                    var $thisOption = $(this);
                    if ($thisOption.val() == idQuestion) {
                        $(this).attr(""disabled"", false);
                    }
           ");
                WriteLiteral(@"         else {
                        $(this).attr(""disabled"", true);
                    }
                });
            });
        }).trigger(""change"");

        var arr = [];
        $(""#addButton"").click(function () {

            var markup;
            $(""#questionSelect option:selected"").each(function () {
                var idQuestion = $(this).val();
                var questionText = $(this).text();
                $(""#answerSelect option:selected"").each(function () {
                    var answerText = $(this).text();
                    arr.push({ QuestionId: idQuestion, Text: answerText });

                    markup = ""<tr><td  scope='row'>"" + questionText + ""</td><td>"" + answerText + ""</td></tr>"";
                });
            });
            $(""#parametr tbody"").append(markup);
            console.log(arr);
        });
</script>
");
                EndContext();
            }
            );
            BeginContext(12579, 8, true);
            WriteLiteral("\r\n\r\n\r\n\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<List<Question>> Html { get; private set; }
    }
}
#pragma warning restore 1591
