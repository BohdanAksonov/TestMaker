#pragma checksum "D:\MyGit\MyProject\TestMaker\TestMaker\Views\Account\Register.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "7b7ffb4edde1a72f2eaeabe50332b819a756650c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Account_Register), @"mvc.1.0.view", @"/Views/Account/Register.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Account/Register.cshtml", typeof(AspNetCore.Views_Account_Register))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 2 "D:\MyGit\MyProject\TestMaker\TestMaker\Views\_ViewImports.cshtml"
using TestMaker.Models;

#line default
#line hidden
#line 3 "D:\MyGit\MyProject\TestMaker\TestMaker\Views\_ViewImports.cshtml"
using TestMaker.ViewModels;

#line default
#line hidden
#line 4 "D:\MyGit\MyProject\TestMaker\TestMaker\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"7b7ffb4edde1a72f2eaeabe50332b819a756650c", @"/Views/Account/Register.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4bc10e74c8a7c33899ebdcc776e44546a0ef5fb5", @"/Views/_ViewImports.cshtml")]
    public class Views_Account_Register : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<RegisterViewModel>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(26, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 3 "D:\MyGit\MyProject\TestMaker\TestMaker\Views\Account\Register.cshtml"
  
    Layout = "_Layout";
    ViewData["Title"] = "Register";

#line default
#line hidden
            BeginContext(97, 68, true);
            WriteLiteral("<div id=\"app\">\r\n    <v-app light>\r\n        <v-content>\r\n            ");
            EndContext();
            BeginContext(166, 23, false);
#line 10 "D:\MyGit\MyProject\TestMaker\TestMaker\Views\Account\Register.cshtml"
       Write(Html.AntiForgeryToken());

#line default
#line hidden
            EndContext();
            BeginContext(189, 2812, true);
            WriteLiteral(@"
            <v-container align-center justify-end row fill-height>
                <v-layout align-center justify-center row>
                    <v-flex xs12 sm8 md6>
                        <v-card class=""elevation-15"">
                            <v-toolbar color=""deep-orange darken-3"">
                                <v-toolbar-title>Register</v-toolbar-title>
                                <v-spacer></v-spacer>
                            </v-toolbar>
                            <v-card-text>
                                    <v-text-field 
                                                  prepend-icon=""email"" 
                                                  name=""Email"" 
                                                  label=""Input your email"" 
                                                  type=""email""
                                                  v-model=""email""
                                                  v-validate=""'required|email'""
                              ");
            WriteLiteral(@"                    :error-messages=""errors.collect('email')""
                                                  data-vv-name=""email"">
                                    </v-text-field>
                                    <v-text-field 
                                                  prepend-icon=""lock"" 
                                                  name=""Password"" 
                                                  label=""Input your password"" 
                                                  type=""password""
                                                  v-model=""password""
                                                  v-validate=""'required|min:10|verify_password'""
                                                  :error-messages=""errors.collect('password')""
                                                  data-vv-name=""password""
                                                  ref=""password"">
                                    </v-text-field>
                                    <");
            WriteLiteral(@"v-text-field 
                                                  prepend-icon=""lock"" 
                                                  name=""ConfirmPassword"" 
                                                  label=""Confirm your password"" 
                                                  type=""password""
                                                  v-model=""confirmPassword""
                                                  v-validate=""'required|confirmed:password'""
                                                  :error-messages=""errors.collect('confirmPassword')""
                                                  data-vv-name=""confirmPassword"">
                                    </v-text-field>
                                    <v-btn ");
            EndContext();
            BeginContext(3002, 381, true);
            WriteLiteral(@"@click=""submit"" color=""amber lighten-1"" block>Register</v-btn>
                                    <v-btn href=""/Account/Login/"" color=""red"" block>Back</v-btn>
                            </v-card-text>
                        </v-card>
                    </v-flex>
                </v-layout>
                </v-container>
            </v-content>
    </v-app>
</div>
");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(3400, 1038, true);
                WriteLiteral(@"
    <script>
        var loginPage = new Vue({
            el: ""#app"",
            $_veeValidate: {
                validator: 'new'
            },
            data() {
                return {
                    email: """",
                    password: """",
                    confirmPassword: """",
                    dictionary: {
                        attributes: {
                            email: ""E-mail Address"",
                            password: ""Password"",
                            confirmPassword:""Confirm password""
                        }
                    }
                }
            },
            created() {
                this.$validator.extend('verify_password', {
                    getMessage: field => `The password must contain at least: 1 uppercase letter, 1 lowercase letter, 1 number, and one special character (E.g. , . _ & ? etc)`,
                    validate: value => {
                    var strongRegex = new RegExp(""^(?=.*[a-z])(?=.*[A-Z])(?=.");
                WriteLiteral("*[0-9])(?=.*[!");
                EndContext();
                BeginContext(4439, 1389, true);
                WriteLiteral(@"@#\$%\^&\*])(?=.{8,})"");
                    return strongRegex.test(value);
                    }           
                });
            },
            mounted() {
                this.$validator.localize('en', this.dictionary)
            },
            methods: {
                submit() {
                    this.$validator.validateAll().then((result) => {
                        if (result) {
                            data2send = JSON.stringify({ Password: this.password, ConfirmPassword: this.confirmPassword, Email: this.email });
                            $.ajax({
                                url: ""/Account/Register/"",
                                type: ""post"",
                                beforeSend: function (request) {
                                    request.setRequestHeader(""RequestVerificationToken"", $(""[name = '__RequestVerificationToken']"").val());
                                },
                                contentType: ""application/json; charset=utf");
                WriteLiteral(@"-8"",
                                data: data2send,
                                success: function (data) {
                                    window.location.href = data;
                                }
                            });
                        }
                    });
                }
            }
        })

    </script>
");
                EndContext();
            }
            );
            BeginContext(5831, 8, true);
            WriteLiteral("\r\n\r\n\r\n\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<RegisterViewModel> Html { get; private set; }
    }
}
#pragma warning restore 1591
