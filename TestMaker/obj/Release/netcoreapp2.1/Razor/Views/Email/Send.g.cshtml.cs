#pragma checksum "E:\MyGit\MyProject\TestMaker\TestMaker\Views\Email\Send.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8bf5e4ef64308a0698e6fac5fc434d02bd02c506"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Email_Send), @"mvc.1.0.view", @"/Views/Email/Send.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Email/Send.cshtml", typeof(AspNetCore.Views_Email_Send))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 2 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\_ViewImports.cshtml"
using TestMaker.Models;

#line default
#line hidden
#line 3 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\_ViewImports.cshtml"
using TestMaker.ViewModels;

#line default
#line hidden
#line 4 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"8bf5e4ef64308a0698e6fac5fc434d02bd02c506", @"/Views/Email/Send.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4bc10e74c8a7c33899ebdcc776e44546a0ef5fb5", @"/Views/_ViewImports.cshtml")]
    public class Views_Email_Send : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(0, 37, true);
            WriteLiteral("<div id=\"app\">\r\n    <v-app>\r\n        ");
            EndContext();
            BeginContext(38, 23, false);
#line 3 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\Email\Send.cshtml"
   Write(Html.AntiForgeryToken());

#line default
#line hidden
            EndContext();
            BeginContext(61, 10, true);
            WriteLiteral("\r\n        ");
            EndContext();
            BeginContext(72, 71, false);
#line 4 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\Email\Send.cshtml"
   Write(await Html.PartialAsync("~/Views/Shared/_RightSidePanelPartial.cshtml"));

#line default
#line hidden
            EndContext();
            BeginContext(143, 3831, true);
            WriteLiteral(@"
        <v-content>
            <v-container align-center justify-end row fill-height>
                <v-layout xs12 sm8 md6>
                    <v-flex>
                        <v-card class=""elevation-15"">
                            <v-toolbar color=""deep-orange darken-3"">
                                <v-toolbar-title>Send test</v-toolbar-title>
                                <v-spacer></v-spacer>
                            </v-toolbar>
                            <v-card-text>
                                <v-container>
                                    <v-layout>
                                        <v-flex>
                                            <v-card-text>
                                                <v-text-field label=""Input email address""
                                                              v-model=""email""
                                                              :rules=""[rules.requared, rules.email]""
                                           ");
            WriteLiteral(@"                   clearable>
                                                </v-text-field>
                                            </v-card-text>
                                        </v-flex>
                                        <v-flex>
                                            <v-card-text>
                                                <v-btn color=""warning"" v-on:click=""add"">Add</v-btn>
                                            </v-card-text>
                                        </v-flex>
                                    </v-layout>
                                </v-container>
                            </v-card-text>
                        </v-card>
                        <v-card class=""elevation-15 mt-4"">
                            <v-toolbar color=""deep-orange darken-3"">
                                <v-toolbar-title>Emails to send</v-toolbar-title>
                                <v-spacer></v-spacer>
                            </v-toolbar>
          ");
            WriteLiteral(@"                  <v-card-text>
                                <v-container>
                                    <v-layout>
                                        <v-flex>
                                            <v-card-text>
                                                <v-list>
                                                    <v-subheader>E-mails</v-subheader>
                                                    <v-list-tile
                                                                 v-for=""email in emailsToSend""
                                                                 :key=""email.address"">
                                                        <v-list-tile-content>
                                                            <v-list-tile-title>{{email.address}}</v-list-tile-title>
                                                        </v-list-tile-content>
                                                    </v-list-tile>
                                              ");
            WriteLiteral(@"  </v-list>
                                            </v-card-text>
                                        </v-flex>
                                        <v-flex>
                                            <v-card-text>
                                                <v-btn color=""warning"" v-on:click=""send"">Send</v-btn>
                                            </v-card-text>
                                        </v-flex>
                                    </v-layout>
                                </v-container>
                            </v-card-text>
                        </v-card>

                    </v-flex>
                </v-layout>
            </v-container>
        </v-content>
    </v-app>
</div>

");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(3991, 430, true);
                WriteLiteral(@"
    <script>
        var app = new Vue({
            el: '#app',
            data() {
                return {
                    drawer: true,
                    email: """",
                    emailsToSend: [],
                    rules: {
                        requared: value => !!value || ""Requared."",
                        email: value => {
                            const pattern = /^(([^<>()[\]\\.,;:\s");
                EndContext();
                BeginContext(4422, 24, true);
                WriteLiteral("@\"]+(\\.[^<>()[\\]\\\\.,;:\\s");
                EndContext();
                BeginContext(4447, 15, true);
                WriteLiteral("@\"]+)*)|(\".+\"))");
                EndContext();
                BeginContext(4463, 1613, true);
                WriteLiteral(@"@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
                            return pattern.test(value) || 'Invalid e-mail.'
                        }
                    },
                    itemsForMembers: [
                        { title: ""Home"", link: ""/Home/Index/"", icon: ""home"", id: ""homeBtn"" },
                        { title: ""Create test"", link: ""/Test/CreateTest/"", icon: ""ballot"" },
                        { title: ""Graphs"", link: ""/Test/Graphs/"", icon: ""equalizer"" }

                    ],
                    itemsLoginPartial: [
                        { title: ""Login"", link: ""/Account/Login/"" },
                        { title: ""Register"", link: ""/Account/Register/"" }
                    ],
                    itemsForAdmins: [
                        { title: ""Home"", link: ""/Home/Index/"", icon: ""home"" },
                        { title: ""Manage user roles"", link: ""/Admin/ManageUserRoles/"", icon: ""dashboard"" },
                       ");
                WriteLiteral(@" { title: ""Manage users"", link: ""/Admin/Members/"", icon: ""people"" }
                    ],
                    headers: [
                        { text: ""Title"", align: ""center"", sortable: false, value: ""title"" },
                        { text: ""Description"", value: ""description"" },
                        { text: ""Create date"", value: ""createDate"" },
                        { text: ""Last modified date"", value: ""lastMD"" },
                    ],
                    dropDownFromResult: [
                        { title: ""Single answer"", link: ""/Question/CreateSingleAnswer/");
                EndContext();
                BeginContext(6077, 34, false);
#line 112 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\Email\Send.cshtml"
                                                                                 Write(ViewContext.RouteData.Values["id"]);

#line default
#line hidden
                EndContext();
                BeginContext(6111, 90, true);
                WriteLiteral("\" },\r\n                        { title: \"Short answer\", link: \"/Question/CreateShortAnswer/");
                EndContext();
                BeginContext(6202, 34, false);
#line 113 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\Email\Send.cshtml"
                                                                               Write(ViewContext.RouteData.Values["id"]);

#line default
#line hidden
                EndContext();
                BeginContext(6236, 96, true);
                WriteLiteral("\" },\r\n                        { title: \"Multiple choice\", link: \"/Question/CreateMultipleChoice/");
                EndContext();
                BeginContext(6333, 34, false);
#line 114 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\Email\Send.cshtml"
                                                                                     Write(ViewContext.RouteData.Values["id"]);

#line default
#line hidden
                EndContext();
                BeginContext(6367, 92, true);
                WriteLiteral("\" },\r\n                        { title: \"Range answer\", link: \"/Question/CreateRangeQuestion/");
                EndContext();
                BeginContext(6460, 34, false);
#line 115 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\Email\Send.cshtml"
                                                                                 Write(ViewContext.RouteData.Values["id"]);

#line default
#line hidden
                EndContext();
                BeginContext(6494, 372, true);
                WriteLiteral(@""" }
                    ]
                }
            },
            methods: {
                add: function () {
                    var mail = this.email;
                    this.emailsToSend.push({ address: mail });

                },
                send: function () {

                   // var data2send = ({ ""Address"": this.emailsToSend, ""TestId"":");
                EndContext();
                BeginContext(6867, 34, false);
#line 127 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\Email\Send.cshtml"
                                                                           Write(ViewContext.RouteData.Values["id"]);

#line default
#line hidden
                EndContext();
                BeginContext(6901, 157, true);
                WriteLiteral("});\r\n                    //var data2send = ({ \"Address\": this.emailsToSend});\r\n                    var data2send = ({ \"Params\": this.emailsToSend, \"TestId\": ");
                EndContext();
                BeginContext(7059, 34, false);
#line 129 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\Email\Send.cshtml"
                                                                         Write(ViewContext.RouteData.Values["id"]);

#line default
#line hidden
                EndContext();
                BeginContext(7093, 874, true);
                WriteLiteral(@"});
                    console.log(JSON.stringify(data2send));
                    $.ajax({
                        type: ""post"",
                        url: ""/Email/SendAsync"",
                        beforeSend: function (request) {
                            request.setRequestHeader(""RequestVerificationToken"", $(""[name = '__RequestVerificationToken']"").val());
                        },
                        contentType: ""application/json"",
                        data: JSON.stringify( data2send ),
                        dataType: ""json"",
                        success: function (response) {
                            if (response) {
                                alert(""Emails are send!"");
                            }
                        }

                    })

                }
            }
        });
    </script>
");
                EndContext();
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
