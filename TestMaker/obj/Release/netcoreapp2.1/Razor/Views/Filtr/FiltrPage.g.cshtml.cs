#pragma checksum "E:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3020fd810f52a78dd27e83d69ae3e09d0f7f66d8"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Filtr_FiltrPage), @"mvc.1.0.view", @"/Views/Filtr/FiltrPage.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Filtr/FiltrPage.cshtml", typeof(AspNetCore.Views_Filtr_FiltrPage))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 2 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\_ViewImports.cshtml"
using TestMaker.Models;

#line default
#line hidden
#line 3 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\_ViewImports.cshtml"
using TestMaker.ViewModels;

#line default
#line hidden
#line 4 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Identity;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"3020fd810f52a78dd27e83d69ae3e09d0f7f66d8", @"/Views/Filtr/FiltrPage.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4bc10e74c8a7c33899ebdcc776e44546a0ef5fb5", @"/Views/_ViewImports.cshtml")]
    public class Views_Filtr_FiltrPage : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<List<Question>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            BeginContext(23, 2, true);
            WriteLiteral("\r\n");
            EndContext();
#line 3 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml"
  
    List<Answer> answerChoice = new List<Answer>();
    

#line default
#line hidden
#line 5 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml"
     foreach (var question in Model)
    {
        if (question.Type == "Single" || question.Type == "Multiple")
        {
            foreach (var answer in question.Answers)
            {
                answerChoice.Add(answer);
            }
        }
    }

#line default
#line hidden
            BeginContext(357, 39, true);
            WriteLiteral("\r\n<div id=\"app\">\r\n    <v-app>\r\n        ");
            EndContext();
            BeginContext(397, 23, false);
#line 19 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml"
   Write(Html.AntiForgeryToken());

#line default
#line hidden
            EndContext();
            BeginContext(420, 10, true);
            WriteLiteral("\r\n        ");
            EndContext();
            BeginContext(431, 71, false);
#line 20 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml"
   Write(await Html.PartialAsync("~/Views/Shared/_RightSidePanelPartial.cshtml"));

#line default
#line hidden
            EndContext();
            BeginContext(502, 836, true);
            WriteLiteral(@"
        <v-content>
            <v-container align-center justify-end row fill-height>
                <v-layout xs12 sm8 md6>
                    <v-flex>
                        <v-card class=""elevation-15"">
                            <v-toolbar color=""deep-orange darken-3"">
                                <v-toolbar-title>Filtrs</v-toolbar-title>
                                <v-spacer></v-spacer>
                            </v-toolbar>
                            <div class=""text-md-center"">
                                <v-card-text>
                                    <v-container>
                                        <v-layout>
                                            <v-flex>
                                                <v-card-text>
                                                    ");
            EndContext();
            BeginContext(1339, 77, false);
#line 36 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml"
                                               Write(await Html.PartialAsync("~/Views/Filtr/_PartialQuestionSelect.cshtml", Model));

#line default
#line hidden
            EndContext();
            BeginContext(1416, 238, true);
            WriteLiteral("\r\n                                                </v-card-text>\r\n                                            </v-flex>\r\n                                            <v-flex>\r\n                                                <v-card-text>\r\n");
            EndContext();
            BeginContext(1777, 604, true);
            WriteLiteral(@"                                                    <v-btn color=""warning"" v-on:click=""add"">Add</v-btn>
                                                </v-card-text>
                                            </v-flex>
                                        </v-layout>
                                    </v-container>

                                    <v-container >
                                        <v-layout>
                                            <v-flex>
                                                <v-card-text>
                                                    ");
            EndContext();
            BeginContext(2382, 82, false);
#line 52 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml"
                                               Write(await Html.PartialAsync("~/Views/Filtr/_PartialAnswerSelect.cshtml", answerChoice));

#line default
#line hidden
            EndContext();
            BeginContext(2464, 2750, true);
            WriteLiteral(@"
                                                </v-card-text>
                                            </v-flex>
                                            <v-flex >
                                                <v-card-text>
                                                    <v-btn color=""red"" v-on:click=""find"">Find</v-btn>
                                                </v-card-text>
                                            </v-flex>
                                        </v-layout>
                                    </v-container>
                                    <v-divider></v-divider>
                                    <v-container>
                                        <v-layout>
                                            <v-flex>
                                                <v-card-text>
                                                        <table id=""parametr"" class=""table table-hover"">
                                                            <thead>
   ");
            WriteLiteral(@"                                                             <tr>
                                                                    <th scope=""col"">Question</th>
                                                                    <th scope=""col"">Answer</th>
                                                                </tr>
                                                            </thead>
                                                            <tbody></tbody>
                                                        </table>

                                                        <table id=""filtrResult"" class=""table table-hover"">
                                                            <thead>
                                                                <tr>
                                                                    <th scope=""col"">Sample Person Id</th>
                                                                    <th scope=""col""></th>
                              ");
            WriteLiteral(@"                                  </tr>
                                                            </thead>
                                                            <tbody></tbody>
                                                        </table>
                                                </v-card-text>
                                            </v-flex>
                                        </v-layout>
                                    </v-container>
                                </v-card-text>
                            </div>
                        </v-flex>
                </v-layout>
            </v-container>

        </v-content>
    </v-app>
</div>

");
            EndContext();
            DefineSection("Scripts", async() => {
                BeginContext(5231, 1403, true);
                WriteLiteral(@"
<script>
        var app = new Vue({
            el: '#app',
                        data() {
                            return {
                                drawer: true,
                                itemsForMembers: [
                                    { title: ""Home"", link: ""/Home/Index/"", icon: ""home"", id: ""homeBtn"" },
                                    { title: ""Create test"", link: ""/Test/CreateTest/"", icon: ""ballot"" },
                                    { title: ""Graphs"", link: ""/Test/Graphs/"", icon: ""equalizer"" }

                                ],
                                itemsLoginPartial: [
                                    { title: ""Login"", link: ""/Account/Login/"" },
                                    { title: ""Register"", link: ""/Account/Register/"" }
                                ],
                                itemsForAdmins: [
                                    { title: ""Home"", link: ""/Home/Index/"", icon: ""home"" },
                                   ");
                WriteLiteral(@" { title: ""Manage user roles"", link: ""/Admin/ManageUserRoles/"", icon: ""dashboard"" },
                                    { title: ""Manage users"", link: ""/Admin/Members/"", icon: ""people"" }
                                ],
                                dropDownFromResult: [
                                    { title: ""Single answer"", link: ""/Question/CreateSingleAnswer/");
                EndContext();
                BeginContext(6635, 34, false);
#line 123 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml"
                                                                                             Write(ViewContext.RouteData.Values["id"]);

#line default
#line hidden
                EndContext();
                BeginContext(6669, 102, true);
                WriteLiteral("\" },\r\n                                    { title: \"Short answer\", link: \"/Question/CreateShortAnswer/");
                EndContext();
                BeginContext(6772, 34, false);
#line 124 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml"
                                                                                           Write(ViewContext.RouteData.Values["id"]);

#line default
#line hidden
                EndContext();
                BeginContext(6806, 108, true);
                WriteLiteral("\" },\r\n                                    { title: \"Multiple choice\", link: \"/Question/CreateMultipleChoice/");
                EndContext();
                BeginContext(6915, 34, false);
#line 125 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml"
                                                                                                 Write(ViewContext.RouteData.Values["id"]);

#line default
#line hidden
                EndContext();
                BeginContext(6949, 104, true);
                WriteLiteral("\" },\r\n                                    { title: \"Range answer\", link: \"/Question/CreateRangeQuestion/");
                EndContext();
                BeginContext(7054, 34, false);
#line 126 "E:\MyGit\MyProject\TestMaker\TestMaker\Views\Filtr\FiltrPage.cshtml"
                                                                                             Write(ViewContext.RouteData.Values["id"]);

#line default
#line hidden
                EndContext();
                BeginContext(7088, 3748, true);
                WriteLiteral(@""" }
                                ],
                                array: [],
                                idQuestion: '',
                                answerText: ''
                            }
            },
            methods: {
                find: function () {
                    let app = this;
                            var data2send = JSON.stringify({ ""params"": app.array });
                            $.ajax({
                                type: ""post"",
                                url: ""/Filtr/GetSamplePersonsId"",
                                beforeSend: function (request) {
                                    request.setRequestHeader(""RequestVerificationToken"", $(""[name = '__RequestVerificationToken']"").val());
                                },
                                contentType: ""application/json"",
                                data: data2send, //JSON.stringify({ connectAnswers }),
                                dataType: ""json"",
           ");
                WriteLiteral(@"                     success: function (response) {
                                    var idSP = response;
                                    console.log(idSP);
                                    $.each(response, function (index, value) {
                                        $(""#filtrResult tbody"").append(""<tr><td>"" + value + ""</td><td><button class='btn btn-warning' color='amber lighten-1' id='btnSee'>See Test</v-btn></td></tr>"")
                                    })
                                }
                            });
                },
                add: function () {
                    var markup;
                    let app = this;
                    $(""#questionSelect option:selected"").each(function () {
                        app.idQuestion = $(this).val();
                        var questionText = $(this).text();
                        $(""#answerSelect option:selected"").each(function () {
                            app.answerText = $(this).text();
        ");
                WriteLiteral(@"                    app.array.push({ QuestionId: app.idQuestion, Text: app.answerText });

                            markup = ""<tr><td  scope='row'>"" + questionText + ""</td><td>"" + app.answerText + ""</td></tr>"";
                        });
                    });
                    $(""#parametr tbody"").append(markup);

                }
            }
        })
        $(""#questionSelect"").change(function () {
            $(""#questionSelect option:selected"").each(function () {
                var idQuestion = $(this).val();
                $(""#answerSelect option"").each(function () {
                    var $thisOption = $(this);
                    if ($thisOption.val() == idQuestion) {
                        $(this).attr(""disabled"", false);
                    }
                    else {
                        $(this).attr(""disabled"", true);
                    }
                });
            });
        }).trigger(""change"");

        var arr = [];
        $(""#addButton"").c");
                WriteLiteral(@"lick(function () {

            var markup;
            $(""#questionSelect option:selected"").each(function () {
                var idQuestion = $(this).val();
                var questionText = $(this).text();
                $(""#answerSelect option:selected"").each(function () {
                    var answerText = $(this).text();
                    arr.push({ QuestionId: idQuestion, Text: answerText });

                    markup = ""<tr><td  scope='row'>"" + questionText + ""</td><td>"" + answerText + ""</td></tr>"";
                });
            });
            $(""#parametr tbody"").append(markup);
            console.log(arr);
        });
</script>
");
                EndContext();
            }
            );
            BeginContext(10839, 8, true);
            WriteLiteral("\r\n\r\n\r\n\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<List<Question>> Html { get; private set; }
    }
}
#pragma warning restore 1591
